To create pofiles form auth.users table - Supabase
----------------------------------------------------

-- Create a table for public users
create table users (
  user_id uuid references auth.users on delete cascade not null primary key,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  email text,  -- Add email column
  avatar_url text,
  website text,
  provider text,
  date_of_birth DATE CHECK (date_of_birth <= CURRENT_DATE AND date_of_birth >= '1900-01-01'),
  address TEXT,
  phone_number TEXT CHECK (phone_number ~ '^\+?[0-9\s\-()]*$'),

  constraint username_length check (char_length(username) >= 3),
  constraint email_format check (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$')  -- Email format check
);

-- Set up Row Level Security (RLS)
alter table users
  enable row level security;

create policy "Users profiles are viewable by everyone." on users
  for select using (true);

create policy "Profiles can insert their own profile." on users
  for insert with check ((select auth.uid()) = user_id);

create policy "Profiles can update own profile." on users
  for update using ((select auth.uid()) = user_id);

-- This trigger automatically creates a users entry when a new user signs up via Supabase Auth.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.users (user_id, full_name, email, avatar_url, provider )
  values (new.id, new.raw_user_meta_data->>'full_name',new.raw_user_meta_data->>'email', new.raw_user_meta_data->>'avatar_url', new.raw_app_meta_data->>'provider');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


****************************************************************

-- Set up Storage!
-- Create a bucket named 'avatars'
insert into storage.buckets (id, name) values ('avatars', 'avatars');

-- Enable RLS on storage.objects
alter table storage.objects enable row level security;

-- Create a policy to allow authenticated users to read all files in the 'avatars' bucket
create policy "Authenticated users can read all avatars" on storage.objects
  for select using (auth.role() = 'authenticated' and bucket_id = 'avatars');

-- Create a policy to allow authenticated users to insert their own files into the 'avatars' bucket
create policy "Authenticated users can insert their own avatars" on storage.objects
  for insert with check (auth.role() = 'authenticated' and bucket_id = 'avatars');

-- Create a policy to allow authenticated users to update their own files in the 'avatars' bucket
create policy "Authenticated users can update their own avatars" on storage.objects
  for update with check (auth.role() = 'authenticated' and bucket_id = 'avatars');

-- Create a policy to allow authenticated users to delete their own files in the 'avatars' bucket
create policy "Authenticated users can delete their own avatars" on storage.objects
  for delete using (auth.role() = 'authenticated' and bucket_id = 'avatars');


**************************************[ New ]**************************

-- Create a trigger function to update the avatar URL in the users table
CREATE OR REPLACE FUNCTION public.update_avatar_url()
RETURNS TRIGGER AS $$
DECLARE
  new_avatar_url TEXT;
  extracted_user_id UUID;
BEGIN
  -- Construct the public URL directly in the function
  new_avatar_url := 'https://uorqkiflhqvfimjgrzmv.supabase.co/storage/v1/object/public/avatars/' || NEW.name;

  -- Extract the user_id from the metadata
  extracted_user_id := split_part(NEW.name, '/', 1)::UUID;

  -- Update the avatar_url in the users table
  UPDATE users
  SET avatar_url = new_avatar_url,
      updated_at = NOW()
  WHERE user_id = extracted_user_id;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger on the storage.objects table
CREATE TRIGGER on_avatar_updated
AFTER INSERT OR UPDATE ON storage.objects
FOR EACH ROW
WHEN (NEW.bucket_id = 'avatars')
EXECUTE FUNCTION public.update_avatar_url();



CREATE TABLE debug_log (
  log_id SERIAL PRIMARY KEY,
  log_message TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

