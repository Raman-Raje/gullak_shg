{"version":3,"file":"static/js/874.c80fe276.chunk.js","mappings":"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","sources":["UI/Pill/index.jsx","components/AddMember/style.js","validation/addMemberValidation.js","forms/Member/index.jsx","components/AddMember/index.jsx","widgets/GroupMembers/style.js","widgets/GroupMembers/index.jsx","pages/group/MembersPage.jsx","utils/validation.js"],"sourcesContent":["// styling\nimport styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {colors, dark, flex, light, textSizes, fonts} from '@styles/vars';\n\n// utils\nimport PropTypes from 'prop-types';\n\nexport const Button = styled.button`\n  ${flex.center}\n  font-size: ${textSizes['12']};\n  padding: 4px 8px;\n  border-radius: 8px;\n  color: ${colors.blue};\n  background-color: ${theme('theme', {\n    light: light.bodyBg,\n    dark: dark.bodyBg\n  })};\n  min-height: 20px;\n  gap: 4px;\n  color: ${colors.blue};\n  transition: color var(--transition), background-color var(--transition);\n  font-family: ${fonts.accent};\n\n  &:hover, &:focus {\n    background-color: ${colors.blue};\n    color: #fff;\n  }\n\n  &.active {\n    color: ${theme('theme', {\n      light: colors.blue,\n      dark: light.bodyBg\n    })};\n    background-color: ${theme('theme', {\n      light: light.highlight,\n      dark: light.text\n    })};\n  }\n`\n\nconst Pill = ({text, handler, icon, style, className}) => {\n    return (\n        <Button className={className ? `pill ${className}` : 'pill'} onClick={handler} style={style}>\n            {icon ? <i className={`icon-${icon}`}></i> : null} {text}\n        </Button>\n    )\n}\n\nPill.propTypes = {\n    text: PropTypes.string.isRequired,\n    handler: PropTypes.func,\n    icon: PropTypes.string,\n    style: PropTypes.object\n}\n\nexport default Pill;","import styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport { flex } from '@styles/vars';\nimport { colors, textSizes, effects } from '@styles/vars';\nimport { ModalContent } from '@components/ModalWindow';\n\nexport const MenuModal = styled(ModalContent)`\n  padding: 36px 24px;\n  ${flex.col};\n  gap: 8px;\n\n  .header {\n    display: flex;\n    ${flex.between};\n    gap: 20px;\n\n    .user .user-option {\n      display: flex;\n      align-items: center;\n      gap: 20px;\n\n      span {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        max-width: 100px;\n      }\n    }\n  }\n`;\n\nexport const List = styled.ul`\n  ${flex.col};\n\n  border-top: ${theme('theme', {\n    light: effects.dashedLight,\n    dark: effects.dashedDark,\n  })};\n\n  padding-top: 10px;\n  gap: 20px;\n`\n\nexport const Block = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  padding: 10px;\n  border-radius: 8px;\n  background-color: ${theme('theme', {\n    light: colors.gray_50,\n    dark: colors.gray_800,\n  })};\n  box-shadow: ${effects.widgetShadow};\n  transition: background-color var(--transition);\n\n  &:hover {\n    background-color: ${theme('theme', {\n      light: colors.gray_100,\n      dark: colors.gray_700,\n    })};\n  }\n\n  .avatar {\n    flex-shrink: 0;\n  }\n\n  .info {\n    ${flex.col};\n    flex: 1;\n\n    .name {\n      font-weight: 500;\n      font-size: ${textSizes['16']};\n      color: ${colors.text.primary};\n    }\n  }\n\n  .actions {\n    flex-shrink: 0;\n  }\n`;","import * as Yup from 'yup';\nimport { phoneNumberRegex } from '@utils/validation';\n\n// add member to SHG. Fields: name, number\n\nconst addMemberSchema = Yup.object().shape({\n\n    email: Yup.string().trim().lowercase().email().when('phone', {\n        is: (phone) => !phone || phone.length === 0,\n        then: () => Yup.string().email().required('phone or email is required'),\n    }),\n    phone: Yup.string().matches(phoneNumberRegex, 'Invalid phone number').when('email', {\n        is: (email) => !email || email.length === 0,\n        then: () => Yup.string().required('phone or email is required'),\n    })\n\n}, [['email', 'phone']]);\n\nexport default addMemberSchema;","\n// ui\nimport Btn from '@ui/Btn'\n\n//form\nimport { Formik, Form } from 'formik'\nimport { FormikField } from '@ui/FormikField'\n\n// validation\nimport addMemberSchema from '@validation/addMemberValidation'\n\n// styles\nimport { Block, BtnWrapper } from '../style'\n\nimport supabase from '@client/client'\n\nconst initialValues = {\n    email: '',\n    phone: ''\n}\n\nconst MemberForm = ({ handler , setUsers }) => {\n\n    const onSubmit = async (values, { setSubmitting, setErrors, resetForm }) => {\n\n        // set submitting to true\n        setSubmitting(true);\n\n        console.log('values')\n        console.log(values)\n\n        // fetch user from supabase\n        const { data, error } = await supabase.rpc('fetch_user_if_exists', { phone_number_input: values.phone, email_input: values.email });\n\n        if (error) {\n            setErrors({ email: error.message });\n            setSubmitting(false);\n            return;\n        }\n\n        console.log('data')\n        console.log(data)\n\n        // set submitting to false\n        setSubmitting(false);\n        setUsers(data)\n        resetForm()\n    }\n\n\n    return (\n\n        <Formik\n            initialValues={initialValues}\n            validationSchema={addMemberSchema}\n            onSubmit={onSubmit}\n        >\n            {({ values, setFieldValue, errors }) => (\n                <Form>\n                    <Block>\n                        <FormikField\n                            name=\"email\"\n                            type=\"text\"\n                            label=\"Email\"\n                            required\n                            placeholder=\"Email Address\"\n                        />\n                        <FormikField\n                            name=\"phone\"\n                            type=\"number\"\n                            label=\"Phone\"\n                            required\n                            placeholder=\"Phone Number\"\n                        />\n                    </Block>\n                    <div style={{ marginTop: 10 }}>\n                        <Btn text='Search' type='submit' />\n                    </div>\n                </Form>\n            )}\n        </Formik>\n\n    )\n}\n\nexport default MemberForm","// components\nimport ModalWindow from '@components/ModalWindow';\n\n// style\nimport { MenuModal, List, Block } from './style'\n\n// Forms\nimport MemberForm from '@forms/Member';\n\n// ui\nimport ShapeButton from '@ui/ShapeButton';\n\n// hooks\nimport { useState, useCallback } from 'react';\n\nimport NamedAvatar from '@ui/NamedAvatar';\nimport Pill from '@ui/Pill';\n\n// hook\nimport useGroupId from '@hooks/useGroupId';\nimport useNotistack from '@hooks/useNotistack';\n\n// supabase\nimport supabase from '@client/client';\n\nconst AddMember = ({ isVisible, visibilityHandler }) => {\n\n    const [users, setUsers] = useState([]);\n    const group_id = useGroupId();\n    const { notify } = useNotistack();\n\n    const closeHandler = useCallback(() => {\n        visibilityHandler(false);\n    }, [visibilityHandler]);\n\n    const handleInvite = async (user_id) => {\n\n        try {\n            const { error } = await supabase.rpc('add_user_to_membership', { user_id_input: user_id, group_id_input: group_id });\n            if (error) throw error;\n            notify('User added to group');\n        } catch (error) {\n            notify(error.message, \"error\");\n        } finally {\n            visibilityHandler(false);\n        }\n    }\n\n    return (\n        <ModalWindow isVisible={isVisible} visibilityHandler={visibilityHandler}>\n            <MenuModal>\n                <div className='header'>\n                    <h2>Add Member</h2>\n                    <ShapeButton shape='round error' icon='close' width='30px' handler={closeHandler} />\n                </div>\n                <div className='body'>\n                    <MemberForm handler={visibilityHandler} setUsers={setUsers} />\n                </div>\n                {users.length > 0 && (\n                    <List>\n                        {users.map(user => (\n                            <Block key={user.user_id}>\n                                <div className='avatar'>\n                                    <NamedAvatar full_name={user.full_name} />\n                                </div>\n                                <div className=\"info\">\n                                    <span className=\"name\">{user.full_name}</span>\n                                </div>\n                                <div className=\"actions\">\n                                    <Pill text='Invite' handler={() => handleInvite(user.user_id)} />\n                                </div>\n                            </Block>\n                        ))}\n                    </List>\n                )}\n            </MenuModal>\n        </ModalWindow>\n    );\n};\n\nexport default AddMember;","import styled from 'styled-components';\nimport theme from 'styled-theming';\nimport { dark, light, flex, fonts, textSizes, breakpoints } from '@styles/vars';\nimport { HeaderWrapper } from '@components/Widget/style';\n\nexport const NavWrapper = styled(HeaderWrapper)`\n  ${breakpoints.tablet} {\n    flex-direction: row;\n    ${flex.between};\n\n    .gender {\n      max-width: 300px;\n    }\n  }\n`;\n\nexport const AddButton = styled.button`\n  font-family: ${fonts.accent};\n  font-size: ${textSizes['24']};\n  font-weight: 500;\n  color: ${theme('theme', {\n  light: light.text,\n  dark: dark.text\n})};\n\n  &.disabled {\n    pointer-events: none;\n    opacity: .5;\n  }\n`;","// components\nimport OptionsNav from '@components/OptionsNav';\nimport Widget from '@components/Widget';\nimport WidgetHeader from '@components/Widget/WidgetHeader';\nimport WidgetBody from '@components/Widget/WidgetBody';\nimport MemberCard from '@components/MemberCard';\nimport AddMember from '@components/AddMember';\nimport WidgetsLoader from '@components/WidgetsLoader';\nimport { Header } from '@components/Widget/style';\n\n// hooks\nimport { useState, useRef, useEffect, useCallback } from 'react';\nimport useStatusFilter from '@hooks/useStatusFilter';\nimport useGroupId from '@hooks/useGroupId';\n\nimport { NavWrapper, AddButton } from './style';\nimport { memberOptions } from '@constants/options';\n\n\n// supabase\nimport supabase from '@client/client';\n\n// store\nimport { useSelector } from 'react-redux';\nimport { selectMyGroup } from '@store/slices/myGroupSlice';\n\nconst GroupMembers = () => {\n\n  const myGroup = useSelector(selectMyGroup);\n  const { assigned_role } = myGroup;\n  const [isFormVisible, setFormVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [members, setMembers] = useState([]);\n  const [error, setError] = useState(null);\n  const headerRef = useRef(null);\n  const listRef = useRef(null);\n\n  // fetch group_id form route location i.e /shg/:group_id/members\n  const group_id = useGroupId();\n\n  const fetchMembers = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const { data, error } = await supabase.rpc('fetch_group_members', { group_id_input: group_id });\n\n      if (error) throw error;\n\n      setMembers(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [group_id]);\n\n  useEffect(() => {\n    if (group_id) {\n      fetchMembers();\n    }\n  }, [group_id, fetchMembers]);\n\n  const { status, setStatus, getStatus } = useStatusFilter(members);\n\n  return (\n    <Widget name=\"GroupMembers\">\n      <WidgetHeader title=\"Members\" style={{ paddingBottom: 0 }} elRef={headerRef}>\n        {\n          assigned_role === 'admin' && <AddButton\n            onClick={() => setFormVisible(true)}\n            className={isFormVisible ? 'disabled' : ''}\n            aria-label=\"Add new Member\"\n          >\n            +\n          </AddButton>\n        }\n\n      </WidgetHeader>\n      <Header sidePadding={true}>\n        <NavWrapper>\n          <OptionsNav options={memberOptions} state={status} handler={setStatus} />\n        </NavWrapper>\n      </Header>\n      <WidgetBody>\n        {loading ? (\n          <WidgetsLoader />\n        ) : error ? (\n          <div>Error: {error}</div>\n        ) : (\n          <MemberCard type=\"member\" arr={status.value === 'all' ? members : getStatus(status)} />\n        )}\n        <div ref={listRef} style={{ overflowY: isFormVisible ? 'hidden' : 'auto' }}>\n          <AddMember isVisible={isFormVisible} visibilityHandler={setFormVisible} />\n        </div>\n      </WidgetBody>\n    </Widget>\n  );\n};\n\nexport default GroupMembers","// components\nimport Page from '@layout/Page';\nimport GroupMembers from '@widgets/GroupMembers';\n\nconst MembersPage = () => {\n    return (\n        <Page>\n            <div key=\"group_members\">\n                <GroupMembers />\n            </div>\n        </Page>\n    )\n}\n\nexport default MembersPage;","\n\nexport const objectIdRegex = /^[0-9a-fA-F]{24}$/;\n\n// 10 digit phone number\nexport const phoneNumberRegex = /^\\d{10}$/;\n\n// contact number\nexport const landlineNumberRegex = /^\\+?\\d{10,15}$/; // Adjust the length range based on your requirements\n\n// Regex pattern to match the string format \"hh:mm-hh:mm\"\nexport const timeSlotPattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]-([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\n\nexport const isoDatePattern = /^\\d{4}-\\d{2}-\\d{2}$/;"],"names":["Button","styled","button","withConfig","componentId","flex","center","textSizes","colors","blue","theme","light","bodyBg","dark","fonts","accent","highlight","text","_ref","handler","icon","style","className","_jsxs","concat","onClick","children","_jsx","MenuModal","ModalContent","col","between","List","ul","effects","dashedLight","dashedDark","Block","li","gray_50","gray_800","widgetShadow","gray_100","gray_700","primary","Yup","shape","email","trim","lowercase","when","is","phone","length","then","required","matches","phoneNumberRegex","initialValues","setUsers","Formik","validationSchema","addMemberSchema","onSubmit","async","values","_ref2","setSubmitting","setErrors","resetForm","console","log","data","error","supabase","rpc","phone_number_input","email_input","message","_ref3","setFieldValue","errors","Form","FormikField","name","type","label","placeholder","marginTop","Btn","isVisible","visibilityHandler","users","useState","group_id","useGroupId","notify","useNotistack","closeHandler","useCallback","ModalWindow","ShapeButton","width","MemberForm","map","user","NamedAvatar","full_name","Pill","user_id_input","user_id","group_id_input","handleInvite","NavWrapper","HeaderWrapper","_templateObject","_taggedTemplateLiteral","breakpoints","tablet","AddButton","_templateObject2","GroupMembers","myGroup","useSelector","selectMyGroup","assigned_role","isFormVisible","setFormVisible","loading","setLoading","members","setMembers","setError","headerRef","useRef","listRef","fetchMembers","useEffect","status","setStatus","getStatus","useStatusFilter","Widget","WidgetHeader","title","paddingBottom","elRef","Header","sidePadding","OptionsNav","options","memberOptions","state","WidgetBody","WidgetsLoader","MemberCard","arr","value","ref","overflowY","AddMember","MembersPage","Page"],"sourceRoot":""}