{"version":3,"file":"static/js/672.4f07e6d9.chunk.js","mappings":"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","sources":["components/DropFiles/style.js","components/DropFiles/index.jsx","forms/EditProfile/ProfileIcon.jsx","validation/userSettingValidation.js","forms/EditProfile/style.js","forms/EditProfile/Profile.jsx","widgets/EditProfile/index.jsx","pages/EditProfilePage.jsx","utils/validation.js"],"sourcesContent":["import styled from 'styled-components';\nimport theme from 'styled-theming';\nimport { flex, textSizes, colors, light, dark } from '@styles/vars';\n\nexport const StyledDropzone = styled.div`\n  position: relative;\n  border-radius: 50%;\n  aspect-ratio: 1 / 1;\n  width: 120px;\n  margin: 0 auto 16px;\n  background-color: ${theme('theme', {\n    light: light.highlight,\n    dark: dark.highlight,\n  })};\n  ${flex.col};\n  ${flex.center};\n  font-size: ${textSizes['18']};\n  cursor: pointer;\n  border: 2px dashed transparent;\n  transition: border-color var(--transition);\n\n  .icon {\n    opacity: 0.5;\n  }\n\n  &:hover, &:focus, &.active {\n    border-color: ${theme('theme', {\n      light: colors.light_gray,\n      dark: colors.dark,\n    })};\n  }\n\n  .hint {\n    display: none;\n  }\n`;\n\nexport const ImageContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  overflow: hidden;\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`;\n\nexport const EditButton = styled.button`\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n  background-color: ${theme('theme', {\n    light: colors.light_gray,\n    dark: colors.dark,\n  })};\n  color: white;\n  border: none;\n  border-radius: 50%;\n  padding: 8px 8px;\n  z-index: 10;\n  cursor: pointer;\n  font-size: ${textSizes['14']};\n  transition: background-color var(--transition);\n\n  &:hover {\n    background-color: ${theme('theme', {\n      light: colors.blue,\n      dark: colors.blue,\n    })};\n  }\n`;\n","import React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport useNotistack from '@hooks/useNotistack';\nimport PropTypes from 'prop-types';\nimport { StyledDropzone, ImageContainer } from './style';\n\n// client\nimport supabase from '@client/client';\n\n\nconst imgTypes = {\n    'image/jpeg': [],\n    'image/png': [],\n    'image/gif': [],\n    'image/bmp': [],\n    'image/webp': [],\n    'image/svg+xml': []\n}\n\nconst docTypes = {\n    'application/pdf': [],\n    'application/msword': [],\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': [],\n    'application/vnd.ms-excel': [],\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': []\n}\n\nconst DropFiles = ({ type, multiple, children, avatarUrl, userId }) => {\n\n    const [imageUrl, setImageUrl] = useState(avatarUrl);\n    const { notify } = useNotistack('File has been successfully uploaded.', 'success');\n\n    const updatePublicUrl = async (filePath) => {\n        const { data, error } = supabase.storage.from('avatars').getPublicUrl(filePath);\n        if (error) {\n            console.error('Error getting public URL:', error);\n            return;\n        }\n\n        console.log('data', data);\n        console.log('data.publicUrl', data.publicUrl);\n\n        // set the public URL\n        setImageUrl(data.publicUrl);\n    }\n\n    const handleDrop = async (acceptedFiles) => {\n        const file = acceptedFiles[0];\n        if (file) {\n\n            // upload the file to the server\n            const fileExt = file.name.split('.').pop();\n            const fileName = `${Math.random()}.${fileExt}`;\n            const filePath = `${userId}/${fileName}`;\n\n            console.log('filepath', filePath);\n\n            // Upload to Supabase storage with user ID in metadata\n            const { data, error } = await supabase.storage\n                .from('avatars') // 'avatars' should be your bucket name\n                .upload(filePath, file, {\n                    upsert: true,\n                    cacheControl: '3600'\n                });\n\n            if (error) {\n                console.error('Error uploading file:', error);\n                return;\n            }\n\n            // update the public URL\n            updatePublicUrl(filePath);\n            notify();\n        }\n    };\n\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive\n    } = useDropzone({\n        accept: type === 'image' ? { ...imgTypes } : { ...docTypes },\n        multiple: multiple,\n        onDrop: handleDrop\n    });\n\n    return (\n        <div>\n            <StyledDropzone {...getRootProps()} className={isDragActive ? 'dropzone active' : 'dropzone'}>\n                <input {...getInputProps()} />\n                {imageUrl ? (\n                    <ImageContainer>\n                        <img src={imageUrl} alt=\"Preview\" />\n                    </ImageContainer>\n                ) : (\n                    children\n                )}\n            </StyledDropzone>\n        </div>\n    )\n}\n\nDropFiles.propTypes = {\n    type: PropTypes.oneOf(['image', 'doc']).isRequired,\n    multiple: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired\n}\n\nexport default DropFiles;\n","\nimport DropFiles from \"@components/DropFiles\";\n\nconst ProfileIcon = ({ avatarUrl , userId }) => {\n\n    const hint = 'Drag image here or click to select file';\n\n    return (\n        <DropFiles multiple={false} type=\"image\" avatarUrl={avatarUrl} userId={userId}>\n            <i className=\"icon icon-image\" aria-label={hint} />\n            <span className=\"hint\">{hint}</span>\n        </DropFiles>\n    )\n}\n\nexport default ProfileIcon;","import * as Yup from 'yup';\nimport { phoneNumberRegex } from \"@utils/validation\";\n\nconst userSettingValidation = Yup.object().shape({\n\n    firstName: Yup.string().required('First name is required'),\n    lastName: Yup.string().required('Last name is required'),\n    dateOfBirth: Yup.string().notRequired(),\n    phoneNumber: Yup.string()\n        .matches(phoneNumberRegex, 'Phone number is not valid')\n        .notRequired(),\n    email: Yup.string()\n        .email('Invalid email format')\n        .required('Email is required'),\n    address: Yup.string().notRequired(),\n\n});\n\nexport default userSettingValidation;","import styled from \"styled-components\";\nimport theme from 'styled-theming';\nimport { flex, breakpoints, textSizes, colors, light, dark } from '@styles/vars';\n\nexport const Block = styled.div`\n  ${flex.col}\n  gap: 16px;\n  width: 100%; \n`\n\nexport const RowBlock = styled.div`\n  ${flex.col}\n  gap: 10px;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${breakpoints.tablet} {\n    gap: 16px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n\n  .button {\n    max-width: 480px;\n    align-self: center;\n  }\n`\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-top: 16px;\n  align-items: center;\n`;\n\nexport const BtnWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 10px;\n`;\n\nexport const LineWithText = styled.div`\n  display: flex;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  margin: 10px 0;\n  &::before, &::after {\n    content: '';\n    flex: 1;\n    border-bottom: 2px dotted lightgray;\n  }\n  &:not(:empty)::before {\n    margin-right: 0.25em;\n  }\n  &:not(:empty)::after {\n    margin-left: 0.25em;\n  }\n`;\n\nexport const ErrorText = styled.span`\n  font-size: ${textSizes['14']};\n  width: fit-content;\n  color: ${colors.error};\n`;\n\nexport const LinkText = styled.a`\n  font-weight: 500;\n  text-decoration: none;\n  cursor: pointer;\n  &:hover {\n    color: ${colors.primary};\n    text-decoration: underline;\n  }\n`;\n\n","import React from 'react'\nimport Btn from '@ui/Btn'\nimport { Formik, Form } from 'formik'\nimport { FormikField, FormikDateField } from '@ui/FormikField'\n\n// validation\nimport userSettingValidation from '@validation/userSettingValidation'\n\n// style\nimport { RowBlock, Block } from './style'\n\n// hooks\nimport useNotistack from '@hooks/useNotistack'\n\n// store\nimport { useDispatch } from 'react-redux';\nimport { updateUserProfile } from '@store/slices/profileSlice';\n\nconst ProfileSettingForm = ({ initialValues, userId }) => {\n\n    const dispatch = useDispatch();\n    const { notify } = useNotistack();\n\n    const onSubmit = async (values, { setSubmitting }) => {\n\n        setSubmitting(true);\n        // push the new values to the backend \n        console.log('values', values);\n\n        // dispatch the action to update the profile\n        const updatedProfile = {\n            full_name: `${values.firstName} ${values.lastName}`,\n            date_of_birth: values.date_of_birth,\n            phone_number: values.phone_number,\n            email: values.email,\n            address: values.address\n        }\n\n        dispatch(updateUserProfile({ updatedProfile, userId }));\n        setSubmitting(false);\n    }\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={userSettingValidation}\n            onSubmit={onSubmit}\n        >\n            {({ values, setFieldValue }) => (\n                <Form>\n                    <Block>\n                        <FormikField\n                            name=\"firstName\"\n                            label=\"First Name\"\n                            placeholder=\"First Name\"\n                            required\n                        />\n                        <FormikField\n                            name=\"lastName\"\n                            label=\"Last Name\"\n                            placeholder=\"Last Name\"\n                            required\n                        />\n                        <FormikDateField\n                            name=\"date_of_birth\"\n                            label=\"Date of Birth\"\n                            placeholder=\"Date of Birth\"\n                        />\n                        <FormikField\n                            name=\"phone_number\"\n                            label=\"Phone Number\"\n                            placeholder=\"Phone\"\n                            required\n                        />\n                        <FormikField\n                            name=\"email\"\n                            label=\"Email\"\n                            placeholder=\"Email\"\n                            required\n                        />\n                        <FormikField\n                            name=\"address\"\n                            label=\"Address\"\n                            placeholder=\"Address\"\n                            asType='textarea'\n                        />\n                        <RowBlock className='button'>\n                            <Btn\n                                text='Save'\n                                handler={() => { notify('Profile Updated') }}\n                                type='submit'\n                            />\n                        </RowBlock>\n                    </Block>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default ProfileSettingForm","import { useEffect } from 'react';\n\n// components\nimport Widget from '@components/Widget';\nimport WidgetBody from '@components/Widget/WidgetBody';\nimport WidgetsLoader from '@components/WidgetsLoader';\nimport WidgetHeader from '@components/Widget/WidgetHeader';\n\n// hook\nimport useAuth from '@hooks/useAuth';\n\n// forms \nimport ProfileIcon from '@forms/EditProfile/ProfileIcon';\nimport ProfileSettingForm from '@forms/EditProfile/Profile';\n\n// store\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchUserProfile, selectProfile, selectLoading } from '@store/slices/profileSlice';\n\nconst EditProfile = () => {\n\n    const { user_id } = useAuth();\n    const dispatch = useDispatch();\n    const profile = useSelector(selectProfile);\n    const loading = useSelector(selectLoading);\n\n    useEffect(() => {\n\n        dispatch(fetchUserProfile(user_id));\n    }, [dispatch]);\n\n\n    const initialValues = {\n        firstName: profile?.full_name.split(' ')[0],\n        lastName: profile?.full_name.split(' ')[1],\n        date_of_birth: profile?.date_of_birth,\n        phone_number: profile?.phone_number,\n        email: profile?.email,\n        address: profile?.address\n    }\n\n    const avatar = profile?.avatar_url;\n\n    return (\n        <Widget name=\"UserSettings\">\n            <WidgetHeader title=\"Settings\" />\n            <WidgetBody>\n                {loading\n                    ? <WidgetsLoader />\n                    :\n                    <>\n                        <ProfileIcon avatarUrl={avatar} userId={user_id} />\n                        <ProfileSettingForm initialValues={initialValues} userId={user_id} />\n                    </>\n                }\n            </WidgetBody>\n        </Widget>\n    )\n}\n\nexport default EditProfile;","// components\nimport Page from '@layout/Page';\nimport EditProfile from '@widgets/EditProfile';\n\nconst EditProfilePage = () => {\n    return (\n        <Page>\n            <div key=\"edit_profile\">\n                <EditProfile />\n            </div>\n        </Page>\n    )\n}\n\nexport default EditProfilePage;","\n\nexport const objectIdRegex = /^[0-9a-fA-F]{24}$/;\n\n// 10 digit phone number\nexport const phoneNumberRegex = /^\\d{10}$/;\n\n// contact number\nexport const landlineNumberRegex = /^\\+?\\d{10,15}$/; // Adjust the length range based on your requirements\n\n// Regex pattern to match the string format \"hh:mm-hh:mm\"\nexport const timeSlotPattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]-([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\n\nexport const isoDatePattern = /^\\d{4}-\\d{2}-\\d{2}$/;"],"names":["StyledDropzone","styled","div","_templateObject","_taggedTemplateLiteral","theme","light","highlight","dark","flex","col","center","textSizes","colors","light_gray","ImageContainer","_templateObject2","button","_templateObject3","blue","imgTypes","docTypes","_ref","type","multiple","children","avatarUrl","userId","imageUrl","setImageUrl","useState","notify","useNotistack","getRootProps","getInputProps","isDragActive","useDropzone","accept","onDrop","async","file","acceptedFiles","fileExt","name","split","pop","fileName","concat","Math","random","filePath","console","log","data","error","supabase","storage","from","upload","upsert","cacheControl","getPublicUrl","publicUrl","updatePublicUrl","_jsx","_jsxs","className","src","alt","hint","DropFiles","Yup","shape","firstName","required","lastName","dateOfBirth","notRequired","phoneNumber","matches","phoneNumberRegex","email","address","Block","RowBlock","breakpoints","tablet","_templateObject4","_templateObject5","span","_templateObject6","a","_templateObject7","primary","initialValues","dispatch","useDispatch","Formik","validationSchema","userSettingValidation","onSubmit","values","_ref2","setSubmitting","updatedProfile","full_name","date_of_birth","phone_number","updateUserProfile","_ref3","setFieldValue","Form","FormikField","label","placeholder","FormikDateField","asType","Btn","text","handler","EditProfile","user_id","useAuth","profile","useSelector","selectProfile","loading","selectLoading","useEffect","fetchUserProfile","avatar","avatar_url","Widget","WidgetHeader","title","WidgetBody","WidgetsLoader","_Fragment","ProfileIcon","ProfileSettingForm","EditProfilePage","Page"],"sourceRoot":""}